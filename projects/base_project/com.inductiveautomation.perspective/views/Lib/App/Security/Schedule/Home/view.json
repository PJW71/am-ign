{
  "custom": {},
  "params": {
    "mode": "edit",
    "selectedHoliday": "",
    "selectedSchedule": ""
  },
  "permissions": {
    "securityLevels": [
      {
        "children": [
          {
            "children": [
              {
                "children": [],
                "name": "Administrator"
              }
            ],
            "name": "Roles"
          }
        ],
        "name": "Authenticated"
      }
    ],
    "type": "AllOf"
  },
  "propConfig": {
    "params.mode": {
      "paramDirection": "output",
      "persistent": true
    },
    "params.selectedHoliday": {
      "binding": {
        "config": {
          "expression": "if({/root/Holidays Table/Table.props.selection.selectedRow}!\u003dNone, {/root/Holidays Table/Table.props.selection.data[0].Name}, \"\")"
        },
        "type": "expr"
      },
      "paramDirection": "output",
      "persistent": true
    },
    "params.selectedSchedule": {
      "binding": {
        "config": {
          "expression": "if({/root/Schedules Table/Table.props.selection.selectedRow}!\u003dNone, {/root/Schedules Table/Table.props.selection.data[0].Name}, \"\")"
        },
        "type": "expr"
      },
      "paramDirection": "output",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 597,
      "width": 700
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "Header"
        },
        "position": {
          "basis": "40px",
          "shrink": 0
        },
        "props": {
          "style": {
            "background-color": "--color-bk-1",
            "font-family": "oswald",
            "font-size": 18,
            "fontWeight": "100",
            "padding-left": 10
          },
          "text": "Schedule Manager"
        },
        "type": "ia.display.label"
      },
      {
        "meta": {
          "name": "Schedules Title"
        },
        "position": {
          "basis": "20px",
          "shrink": 0
        },
        "props": {
          "style": {
            "classes": "title-modern",
            "margin": "5px 0 0 5px"
          },
          "text": "Schedules"
        },
        "type": "ia.display.label"
      },
      {
        "children": [
          {
            "events": {
              "component": {
                "onRowDoubleClick": {
                  "config": {
                    "script": "\t# Calls to custom method on Edit Icon to change view to AddEditSchedule and pass the selected Schedules name to the view.\n\tself.parent.getChild(\"Icons\").getChild(\"Edit\").editSchedule()"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "Table"
            },
            "position": {
              "basis": "750px",
              "grow": 1
            },
            "propConfig": {
              "props.data": {
                "binding": {
                  "config": {
                    "path": "view.params.selectedSchedule"
                  },
                  "transforms": [
                    {
                      "code": "\t\u0027\u0027\u0027\n\tPulls all current schedules from the Gateway and broadcasts a session scope message\n\twith a dataset containing the schedules.\n\t\u0027\u0027\u0027\t\n\t# Try to get schedules from Gateway, if that fails, return no schedules message and disable row selection.\n\ttry:\n\t\tschedules \u003d system.user.getSchedules()\n\texcept:\n\t\theaders \u003d [\u0027Name\u0027, \u0027Description\u0027]\n\t\trows \u003d [[\"No Schedules Exist\", \"\"]]\n\t\tdataset \u003d system.dataset.toDataSet(headers, rows)\n\t\tself.props.selection.enableRowSelection \u003d False\n\t\treturn dataset\n\n\t# Create a list schedule objects that doesn\u0027t include schedules that aren\u0027t basic schedule types and duplicates schedule names.\n\tfilteredSchedules \u003d {}\n\tscheduleList \u003d []\n\t# Create a list of schedule objects that only includes basic schedule types and does not include duplicate schedule names.\n\tfor schedule in filter(lambda x: x.getType() \u003d\u003d \u0027basic schedule\u0027, schedules):\n\t\tif schedule.getName() not in filteredSchedules:\n\t\t\t# Add schedule to filteredSchedules for checking duplicates and add to ScheduleList for creating dataset for table.\n\t\t\tfilteredSchedules[schedule.getName()] \u003d None\n\t\t\tscheduleList.append([schedule.getName(), schedule.getDescription()])\t\n\t\t\t\n\t# Create dataset using the list scheduleList.\n\theaders \u003d [\"Name\", \"Description\"]\n\tscheduleDataset \u003d system.dataset.toDataSet(headers, scheduleList)\t\n\t\n\t# Sort dataset based on the first column\n\tsortedScheduleDataset \u003d system.dataset.sort(scheduleDataset, 0)\n\n\t# Enable row selection and return dataset.\n\tself.props.selection.enableRowSelection \u003d True\n\treturn sortedScheduleDataset",
                      "type": "script"
                    }
                  ],
                  "type": "property"
                }
              }
            },
            "props": {
              "cells": {
                "style": {
                  "color": "#95A4AC",
                  "fontSize": 15,
                  "fontWeight": 100
                }
              },
              "columns": [
                {
                  "align": "center",
                  "boolean": "checkbox",
                  "dateFormat": "MM/DD/YYYY",
                  "editable": false,
                  "field": "Name",
                  "footer": {
                    "align": "center",
                    "justify": "left",
                    "style": {
                      "classes": ""
                    },
                    "title": ""
                  },
                  "header": {
                    "align": "center",
                    "justify": "left",
                    "style": {
                      "backgroundColor": "--color-bk-0",
                      "classes": "",
                      "font-size": 15,
                      "fontWeight": "300"
                    },
                    "title": ""
                  },
                  "justify": "auto",
                  "number": "value",
                  "numberFormat": "0,0.##",
                  "progressBar": {
                    "bar": {
                      "color": "#62A3F6",
                      "linecap": "round",
                      "width": 5
                    },
                    "max": 100,
                    "track": {
                      "color": "#DADADA",
                      "linecap": "round",
                      "width": 2
                    },
                    "value": {
                      "color": "#7D7D7D",
                      "show": true
                    }
                  },
                  "render": "auto",
                  "resizable": true,
                  "sortable": true,
                  "strictWidth": false,
                  "style": {
                    "classes": ""
                  },
                  "toggleSwitch": {
                    "color": {
                      "selected": "#2196F3",
                      "unselected": "#FFFFFF"
                    }
                  },
                  "viewParams": {},
                  "viewPath": "",
                  "visible": true,
                  "width": "auto"
                },
                {
                  "align": "center",
                  "boolean": "checkbox",
                  "dateFormat": "MM/DD/YYYY",
                  "editable": false,
                  "field": "Description",
                  "footer": {
                    "align": "center",
                    "justify": "left",
                    "style": {
                      "classes": ""
                    },
                    "title": ""
                  },
                  "header": {
                    "align": "center",
                    "justify": "left",
                    "style": {
                      "backgroundColor": "--color-bk-0",
                      "classes": "",
                      "font-size": 15,
                      "fontWeight": "300"
                    },
                    "title": ""
                  },
                  "justify": "auto",
                  "number": "value",
                  "numberFormat": "0,0.##",
                  "progressBar": {
                    "bar": {
                      "color": "#62A3F6",
                      "linecap": "round",
                      "width": 5
                    },
                    "max": 100,
                    "track": {
                      "color": "#DADADA",
                      "linecap": "round",
                      "width": 2
                    },
                    "value": {
                      "color": "#7D7D7D",
                      "show": true
                    }
                  },
                  "render": "auto",
                  "resizable": true,
                  "sortable": true,
                  "strictWidth": false,
                  "style": {
                    "classes": ""
                  },
                  "toggleSwitch": {
                    "color": {
                      "selected": "#2196F3",
                      "unselected": "#FFFFFF"
                    }
                  },
                  "viewParams": {},
                  "viewPath": "",
                  "visible": true,
                  "width": 200
                }
              ],
              "pager": {
                "bottom": false
              },
              "rows": {
                "striped": {
                  "color": {
                    "even": "var(--color-bk-2)",
                    "odd": "var(--color-bk-1)"
                  }
                },
                "subview": {
                  "viewParams": {
                    "mode": "edit",
                    "selectedSchedule": "data[\"Name\"]"
                  },
                  "viewPath": "Lib/App/Security/Schedule/AddEditSchedule"
                }
              },
              "style": {
                "classes": "widget-bk mytable",
                "margin": "5px 0 10px 10px"
              }
            },
            "type": "ia.display.table"
          },
          {
            "children": [
              {
                "events": {
                  "dom": {
                    "onClick": {
                      "config": {
                        "script": "\t# Refresh schedule table data binding and rotate refresh icon.\n\tself.parent.parent.getChild(\"Table\").refreshBinding(\"props.data\")\n\tself.rotateIcon()"
                      },
                      "scope": "G",
                      "type": "script"
                    }
                  }
                },
                "meta": {
                  "name": "Refresh"
                },
                "position": {
                  "basis": "26px",
                  "shrink": 0
                },
                "props": {
                  "path": "material/refresh",
                  "style": {
                    "classes": "icon-button",
                    "margin": "5px 0px 2px 0"
                  }
                },
                "scripts": {
                  "customMethods": [
                    {
                      "name": "rotateIcon",
                      "params": [],
                      "script": "\timport time\n\t\n\t# Animation: Rotate icon 360 degrees:\n\tfor degree in range(0, 361, 10):\n\t\tself.props.style.transform \u003d \"rotate(\" + str(degree) + \"deg)\"\n\t\ttime.sleep(0.0278)"
                    }
                  ],
                  "extensionFunctions": null,
                  "messageHandlers": [
                    {
                      "messageType": "ScheduleManagement_RefreshTables",
                      "pageScope": true,
                      "script": "\t# Refresh schedule table data binding.\n\tself.parent.parent.getChild(\"Table\").refreshBinding(\"props.data\")",
                      "sessionScope": false,
                      "viewScope": false
                    }
                  ]
                },
                "type": "ia.display.icon"
              },
              {
                "events": {
                  "dom": {
                    "onClick": {
                      "config": {
                        "script": "\t# Change mode to add and change the view to AddEditSchedule.\n\tself.view.params.mode \u003d \"add\"\n\tsystem.perspective.sendMessage(messageType\u003d\u0027ScheduleManagement_ChangeViews\u0027, payload\u003d{\"view\":\"addEditSchedule\"}, scope\u003d\"page\")"
                      },
                      "scope": "G",
                      "type": "script"
                    }
                  }
                },
                "meta": {
                  "name": "Add"
                },
                "position": {
                  "basis": "28px",
                  "shrink": 0
                },
                "props": {
                  "path": "material/add",
                  "style": {
                    "classes": "icon-button",
                    "margin": "5px 0px 2px 0"
                  }
                },
                "type": "ia.display.icon"
              },
              {
                "events": {
                  "dom": {
                    "onClick": {
                      "config": {
                        "script": "\t# Uses Custom Method for changing views and passing chosen Schedule name to the view.\n\tself.editSchedule()"
                      },
                      "scope": "G",
                      "type": "script"
                    }
                  }
                },
                "meta": {
                  "name": "Edit"
                },
                "position": {
                  "basis": "24px",
                  "shrink": 0
                },
                "propConfig": {
                  "props.style.classes": {
                    "binding": {
                      "config": {
                        "path": ".../Table.props.selection.selectedRow"
                      },
                      "transforms": [
                        {
                          "code": "\tif value \u003d\u003d None:\n\t\treturn \"icon-button-disable\"\n\telse:\n\t\ttry:\n\t\t\tif self.parent.parent.getChild(\"Table\").props.selection.data[0].Name \u003d\u003d \"Always\":\n\t\t\t\treturn \"icon-button-disable\"\n\t\t\telse:\t\n\t\t\t\treturn \"icon-button\"\n\t\texcept:\n\t\t\treturn \"icon-button\"",
                          "type": "script"
                        }
                      ],
                      "type": "property"
                    }
                  }
                },
                "props": {
                  "path": "material/create",
                  "style": {
                    "margin": "5px 0px 2px 0"
                  }
                },
                "scripts": {
                  "customMethods": [
                    {
                      "name": "editSchedule",
                      "params": [],
                      "script": "\t# If a table row is not selected do nothing, else change mode to edit, view to AddEditSchedule, and pass chosen Schedule name to view.\n\tif self.parent.parent.getChild(\"Table\").props.selection.selectedRow \u003d\u003d None or self.parent.parent.getChild(\"Table\").props.selection.data[0].Name \u003d\u003d \"Always\":\n\t\tpass\n\telse:\t\t\n\t\tself.view.params.mode \u003d \"edit\"\n\t\tsystem.perspective.sendMessage(messageType\u003d\"ScheduleManagement_ChangeViews\", payload\u003d{\"view\":\"addEditSchedule\"}, scope\u003d\"page\")"
                    }
                  ],
                  "extensionFunctions": null,
                  "messageHandlers": []
                },
                "type": "ia.display.icon"
              },
              {
                "events": {
                  "dom": {
                    "onClick": {
                      "config": {
                        "script": "\t# If a row isn\u0027t selected or selected schedule is \"Always\" do nothing. Else, open popup to check with user before removing schedule.\n\tif self.parent.parent.getChild(\"Table\").props.selection.selectedRow is None or self.parent.parent.getChild(\"Table\").props.selection.data[0].Name is \"Always\":\n\t\tpass\n\telse:\n\t\tsystem.perspective.openPopup(\n\t\t\tid            \u003d \"ScheduleManagement_CheckBeforeRemoval\", \n\t\t\tview          \u003d \"Lib/App/Security/Schedule/Popups/CheckRemoval\", \n\t\t\tparams        \u003d {\"type\":\"schedule\", \"name\":self.parent.parent.getChild(\"Table\").props.selection.data[0].Name}, \n\t\t\tshowCloseIcon \u003d False, \n\t\t\tdraggable     \u003d False\n\t\t)"
                      },
                      "scope": "G",
                      "type": "script"
                    }
                  }
                },
                "meta": {
                  "name": "Delete"
                },
                "position": {
                  "basis": "27px",
                  "shrink": 0
                },
                "propConfig": {
                  "props.style.classes": {
                    "binding": {
                      "config": {
                        "path": ".../Table.props.selection.selectedRow"
                      },
                      "transforms": [
                        {
                          "code": "\tif value \u003d\u003d None:\n\t\treturn \"icon-button-disable\"\n\telse:\n\t\ttry:\n\t\t\tif self.parent.parent.getChild(\"Table\").props.selection.data[0].Name \u003d\u003d \"Always\":\n\t\t\t\treturn \"icon-button-disable\"\n\t\t\telse:\t\n\t\t\t\treturn \"icon-button\"\n\t\texcept:\n\t\t\treturn \"icon-button\"",
                          "type": "script"
                        }
                      ],
                      "type": "property"
                    }
                  }
                },
                "props": {
                  "path": "material/clear",
                  "style": {
                    "margin": "5px 0px 2px 0"
                  }
                },
                "type": "ia.display.icon"
              }
            ],
            "meta": {
              "name": "Icons"
            },
            "position": {
              "basis": "50px",
              "shrink": 0
            },
            "props": {
              "direction": "column",
              "style": {
                "overflow": "hidden"
              }
            },
            "type": "ia.container.flex"
          }
        ],
        "meta": {
          "name": "Schedules Table"
        },
        "position": {
          "basis": "220px",
          "grow": 1,
          "shrink": 0
        },
        "props": {
          "style": {
            "overflow": "hidden"
          }
        },
        "type": "ia.container.flex"
      },
      {
        "meta": {
          "name": "Holidays Title"
        },
        "position": {
          "basis": "20px",
          "shrink": 0
        },
        "props": {
          "style": {
            "classes": "title-modern",
            "margin": "5px 0 0 5px"
          },
          "text": "Holidays"
        },
        "type": "ia.display.label"
      },
      {
        "children": [
          {
            "events": {
              "component": {
                "onRowDoubleClick": {
                  "config": {
                    "script": "\t# Calls to custom method on Edit Icon to change view to AddEditHoliday and pass the selected Holiday name to the view.\n\tself.parent.getChild(\"Icons\").getChild(\"Edit\").editHoliday()"
                  },
                  "scope": "G",
                  "type": "script"
                }
              }
            },
            "meta": {
              "name": "Table"
            },
            "position": {
              "basis": "750px",
              "grow": 1
            },
            "propConfig": {
              "props.data": {
                "binding": {
                  "config": {
                    "path": "view.params.selectedHoliday"
                  },
                  "transforms": [
                    {
                      "code": "\t\u0027\u0027\u0027\n\tPulls all current holidays from the Gateway and broadcasts a session scope message\n\twith a dataset containing the holidays.\n\t\u0027\u0027\u0027\n\tholidays \u003d system.user.getHolidays()\n\t\n\t# If holidays do not exists on the Gateway, return no holidays message and disable row selection.\n\tif not holidays:\n\t\theaders \u003d [\u0027Name\u0027]\n\t\trows \u003d [[\"No Holidays Exist\"]]\n\t\tdataset \u003d system.dataset.toDataSet(headers, rows)\n\t\tself.props.selection.enableRowSelection \u003d False\n\t\treturn dataset\n\t\t\n\t# Loop through holidays creating a list of holiday names.\n\tholidayList \u003d []\n\tfor holiday in holidays:\n\t\tholidayList.append([holiday.getName()])\n\t\n\t# Create dataset using the list holidayList.\t\n\theaders \u003d [\"Name\"]\n\tholidayDataset \u003d system.dataset.toDataSet(headers, holidayList)\n\n\t# Sort dataset based on the first column.\n\tsortedHolidayDataset \u003d system.dataset.sort(holidayDataset, 0)\n\t\n\t# Enable row selection and return dataset.\n\tself.props.selection.enableRowSelection \u003d True\n\treturn sortedHolidayDataset",
                      "type": "script"
                    }
                  ],
                  "type": "property"
                }
              }
            },
            "props": {
              "cells": {
                "style": {
                  "color": "#95A4AC",
                  "fontSize": 15,
                  "fontWeight": "100"
                }
              },
              "columns": [
                {
                  "align": "center",
                  "boolean": "checkbox",
                  "dateFormat": "MM/DD/YYYY",
                  "editable": false,
                  "field": "Name",
                  "footer": {
                    "align": "center",
                    "justify": "left",
                    "style": {
                      "classes": ""
                    },
                    "title": ""
                  },
                  "header": {
                    "align": "center",
                    "justify": "left",
                    "style": {
                      "backgroundColor": "--color-bk-0",
                      "classes": "",
                      "font-size": 15,
                      "fontWeight": "300"
                    },
                    "title": ""
                  },
                  "justify": "auto",
                  "number": "value",
                  "numberFormat": "0,0.##",
                  "progressBar": {
                    "bar": {
                      "color": "",
                      "style": {
                        "classes": ""
                      }
                    },
                    "max": 100,
                    "min": 0,
                    "track": {
                      "color": "",
                      "style": {
                        "classes": ""
                      }
                    },
                    "value": {
                      "enabled": true,
                      "format": "0,0.##",
                      "justify": "center",
                      "style": {
                        "classes": ""
                      }
                    }
                  },
                  "render": "auto",
                  "resizable": true,
                  "sort": "none",
                  "sortable": true,
                  "strictWidth": false,
                  "style": {
                    "classes": ""
                  },
                  "toggleSwitch": {
                    "color": {
                      "selected": "",
                      "unselected": ""
                    }
                  },
                  "viewParams": {},
                  "viewPath": "",
                  "visible": true,
                  "width": ""
                }
              ],
              "pager": {
                "bottom": false
              },
              "rows": {
                "striped": {
                  "color": {
                    "even": "var(--color-bk-2)",
                    "odd": "var(--color-bk-1)"
                  }
                },
                "style": {
                  "classes": "InputFont"
                }
              },
              "style": {
                "classes": "widget-bk mytable",
                "margin": "5px 0 10px 10px"
              }
            },
            "type": "ia.display.table"
          },
          {
            "children": [
              {
                "events": {
                  "dom": {
                    "onClick": {
                      "config": {
                        "script": "\t# Refresh holiday table data binding and rotate refresh icon.\n\tself.parent.parent.getChild(\"Table\").refreshBinding(\"props.data\")\n\tself.rotateIcon()"
                      },
                      "scope": "G",
                      "type": "script"
                    }
                  }
                },
                "meta": {
                  "name": "Refresh"
                },
                "position": {
                  "basis": "26px",
                  "shrink": 0
                },
                "props": {
                  "path": "material/refresh",
                  "style": {
                    "classes": "icon-button",
                    "margin": "5px 0px 2px 0",
                    "transform": "rotate(360deg)"
                  }
                },
                "scripts": {
                  "customMethods": [
                    {
                      "name": "rotateIcon",
                      "params": [],
                      "script": "\timport time\n\t\n\t# Animation: Rotate icon 360 degrees:\n\tfor degree in range(0, 361, 10):\n\t\tself.props.style.transform \u003d \"rotate(\" + str(degree) + \"deg)\"\n\t\ttime.sleep(0.0278)"
                    }
                  ],
                  "extensionFunctions": null,
                  "messageHandlers": [
                    {
                      "messageType": "ScheduleManagement_RefreshTables",
                      "pageScope": true,
                      "script": "\t# Refresh holiday table data binding.\n\tself.parent.parent.getChild(\"Table\").refreshBinding(\"props.data\")",
                      "sessionScope": false,
                      "viewScope": false
                    }
                  ]
                },
                "type": "ia.display.icon"
              },
              {
                "events": {
                  "dom": {
                    "onClick": {
                      "config": {
                        "script": "\t# Change mode to add and change views to AddEditHoliday\n\tself.view.params.mode \u003d \"add\"\n\tsystem.perspective.sendMessage(messageType\u003d\"ScheduleManagement_ChangeViews\", payload\u003d{\"view\":\"addEditHoliday\"}, scope\u003d\"page\")"
                      },
                      "scope": "G",
                      "type": "script"
                    }
                  }
                },
                "meta": {
                  "name": "Add"
                },
                "position": {
                  "basis": "29px",
                  "shrink": 0
                },
                "props": {
                  "path": "material/add",
                  "style": {
                    "classes": "icon-button",
                    "margin": "5px 0px 2px 0"
                  }
                },
                "type": "ia.display.icon"
              },
              {
                "events": {
                  "dom": {
                    "onClick": {
                      "config": {
                        "script": "\t# Uses Custom Method for changing views and passing chosen Holiday name to the view.\n\tself.editHoliday()"
                      },
                      "scope": "G",
                      "type": "script"
                    }
                  }
                },
                "meta": {
                  "name": "Edit"
                },
                "position": {
                  "basis": "24px",
                  "shrink": 0
                },
                "propConfig": {
                  "props.style.classes": {
                    "binding": {
                      "config": {
                        "expression": "if ({.../Table.props.selection.selectedRow} \u003d null, \u0027icon-button-disable\u0027, \u0027icon-button\u0027)"
                      },
                      "type": "expr"
                    }
                  }
                },
                "props": {
                  "path": "material/create",
                  "style": {
                    "margin": "5px 0px 2px 0"
                  }
                },
                "scripts": {
                  "customMethods": [
                    {
                      "name": "editHoliday",
                      "params": [],
                      "script": "\t# If a table row is not selected do nothing, else change the mode to edit, view to AddEditHoliday, and pass chosen Holiday name to view. \n\tif self.parent.parent.getChild(\"Table\").props.selection.selectedRow \u003d\u003d None:\n\t\tpass\n\telse:\n\t\tself.view.params.mode \u003d \"edit\"\n\t\tsystem.perspective.sendMessage(messageType\u003d\"ScheduleManagement_ChangeViews\", payload\u003d{\"view\":\"addEditHoliday\"}, scope\u003d\"page\")"
                    }
                  ],
                  "extensionFunctions": null,
                  "messageHandlers": []
                },
                "type": "ia.display.icon"
              },
              {
                "events": {
                  "dom": {
                    "onClick": {
                      "config": {
                        "script": "\t# If a row is not selected do nothing. Else, open popup to check with user before Holiday removal.\n\tif self.parent.parent.getChild(\"Table\").props.selection.selectedRow \u003d\u003d None:\n\t\tpass\n\telse:\n\t\tsystem.perspective.openPopup(\n\t\t\tid            \u003d \"ScheduleManagement_CheckBeforeRemoval\", \n\t\t\tview          \u003d \"Lib/App/Security/Schedule/Popups/CheckRemoval\", \n\t\t\tparams        \u003d {\"type\":\"holiday\", \"name\":self.parent.parent.getChild(\"Table\").props.selection.data[0].Name}, \n\t\t\tshowCloseIcon \u003d False, \n\t\t\tdraggable     \u003d False\n\t\t)"
                      },
                      "scope": "G",
                      "type": "script"
                    }
                  }
                },
                "meta": {
                  "name": "Delete"
                },
                "position": {
                  "basis": "27px",
                  "shrink": 0
                },
                "propConfig": {
                  "props.style.classes": {
                    "binding": {
                      "config": {
                        "expression": "if ({.../Table.props.selection.selectedRow} \u003d null, \u0027icon-button-disable\u0027, \u0027icon-button\u0027)"
                      },
                      "type": "expr"
                    }
                  }
                },
                "props": {
                  "path": "material/clear",
                  "style": {
                    "margin": "5px 0px 2px 0"
                  }
                },
                "type": "ia.display.icon"
              }
            ],
            "meta": {
              "name": "Icons"
            },
            "position": {
              "basis": "50px",
              "shrink": 0
            },
            "props": {
              "direction": "column",
              "style": {
                "overflow": "hidden"
              }
            },
            "type": "ia.container.flex"
          }
        ],
        "meta": {
          "name": "Holidays Table"
        },
        "position": {
          "basis": "150px",
          "grow": 1,
          "shrink": 0
        },
        "props": {
          "style": {
            "overflow": "hidden"
          }
        },
        "type": "ia.container.flex"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "alignContent": "center",
      "direction": "column",
      "justify": "center",
      "style": {
        "backgroundColor": "--color-bk-3"
      }
    },
    "type": "ia.container.flex"
  }
}